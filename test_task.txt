Тестовое задание:

Для практики по базам данных и Ruby нужно будет создать небольшое приложение, позволяющее создавать и оперировать сущностями в БД.
Создавать будем консольный интерфейс работы станции.

Пример работы приложения:
1. Запускаем его командой ruby app.rb или через батник, смотря как хочешь.
2. После запуска приложение ожидает команд на ввод.
  2.1. Примеры команд
    2.1.1. help - выводит список всех команд с краткими пояснениями
    2.1.2. train create - вызывает функцию и выводит на экран запросы с данными, которые необходимо ввести для формирования поезда
            (например поочередно запрашивает индекс(в него зашиты коды станций отправления и назначения(первые 6 и последние 6 цифр)), тип маршрута(обычный/скорый/...), номер нитки графика, время отправления, прибытия, и т.д.)
    2.1.3. train create -index='988306-555-967600' -type=0 -dep='08.12.2019 21:07:00' -tnum=2687 - желательно, чтобы команды кроме возможности вызова через интерфейс могли принимать параметры по флагам, а те параметры, которых не хватает, запрашивали автоматически.
    2.1.4. help train - пример команды, выводящей подробную информацию о любой команде, доступной в системе
  2.2. В случае выполнения/невыполнения любой команды на выход должна появлятся запись об успешном выполнении, либо информация об ошибке.

Функциональные требования:
ДОПИСАТЬ САМИ ПОЯСНЕНИЯ
1. Реализация команды help - обязательна
DONE
2. Возжность вывода всех основных команд в меню с возможностью вызова их цифрами(например вводим команду menu и нам его показывает) - для удобстава использования.
3. Возможность добавления станций, поездов, вагонов. (нельзя сформировать поезд, если отсутствует станция, соответственно, если станции не существует, то и связанные с ней объекты должны перестать существовать)
DONE
4. Все данные приложения хранятся в БД(PostgreSQL 11-12 или SQLite 3)
DONE
5. Команды, которые должны быть у любой сущности в том числе пользовательской(станция, поезд, вагон и др.)
  * - название сущности
  xi - название колонки i
  pj - параметр j
  
  DONE
  5.1. * select [columns=[all|x1, ..., xi] | count] where x=p1 ... [and|or] xi=pj [order [asc|desc]] - выборка данных в объектах сущностей
    (train select where index='123123-222-456456' order asc - выведет список поездов(все колонки) с индексом '123123-222-456456' отсортированный по возрастанию)
    (train select columns=[index, type] where index='123123-222-456456' and tnum=2206  - выведет список поездов(колонки index, type) с индексом '123123-222-456456' и номером нитки 2206)
    (train select count where type=1 - выведет количество поездов с типом 1)
    
    - Параметр columns не обязательный при вводе запроса, по умолчанию равен all
    - Параметр order не обязательный при вводе запроса
  DONE
  5.2. * update columns x=p1 ... xi=pj where x=p1 ... [and|or] xi=pj - обновление данных в объектах сущностей
      (train update columns type=0 index='999999-888-999999' where type=1 or type=3 - обновит данные об поездах с типом 1 или 3, поставив им индекс и тип: type=0 index='999999-888-999999')
      
      - При обновлении параметров, связанных с другими сущностями должны выполнятся проверки на возможность их изменения (например нельзя проставить поезду несуществующую станцию в индекс)
  DONE
  5.3. * delete where x=p1 ... [and|or] xi=pj - удаление объектов сущностей
      train delete where type=0 удалить данные об поездах с типом 0
      
      - При удалении записей с внешними зависимостями запрашивать подтверждение.
  DONE
  5.4. * generate p1
       train generate 100 - генерация 100 поездов
       - Желательно прикрутить к команде флаги например для генерации поездов генерировать ли вагоны
6. Необходимо выводить суточную статистику по прибытию/отбытию поездов со станции согласно информации в БД в формате:
  |№|Дата      |Станция    |Прибыло поездов/вагонов|Отправилось поездов/вагонов|
  |1|12.12.2019|Смоляниново|5/328                  |8/401                      |
  |2|12.12.2019|Владивосток|2/66                   |11/864                     |
  После вывода статистики должна быть возмжность ввести номер строки и посмотреть детализацию в формате:
  |Индекс поезда    |Номер поезда |№вагона|Груз  |Станция назначения|Дата отправления|Дата прибытия|
  |988306-888-967600|8868         |1      |Мазут |Смоляниново       |12.12.2019      |13.12.2019   |
  |988306-888-967600|8868         |2      |Уголь |Смоляниново       |12.12.2019      |13.12.2019   |
  |988306-888-967600|8868         |3      |Уголь |Смоляниново       |12.12.2019      |13.12.2019   |
  |988306-777-967600|5268         |1      |Бензин|Смоляниново       |12.12.2019      |13.12.2019   |
  |988306-777-967600|5268         |2      |Мазут |Смоляниново       |12.12.2019      |13.12.2019   |
  |988306-777-967600|5268         |3      |Мазут |Смоляниново       |12.12.2019      |13.12.2019   |
Нефункциональные требования:
DONE
1. Желательно реализовать защиту от sql-инъекций, если сможешь.
2. Автотесты на RSpec приветствуются, но не обязательны.
DONE
3. СУБД PostgreSQL 11-12 или SQLite 3
DONE
4. Версия Ruby не ниже 2.5, желательно 2.6.5
DONE
5. Необходимо свести использование gem-ов к минимуму, желательно использовать их только для работы с БД или для её инитовки из csv/sql файлов. Все запросы писать не через ORM, а на чистом SQL.

Общие пожелания:
1. Оцениватся будет общее качество кода, его читаемость, так что комментарии крайне приветствуются.
2. Код для удобства лучше разбить на модули в отдельных файлах.
3. Если есть желание реализовать дополнительную функциональность или другие сущности, то это также приветствуются.

Сроков не даем, но чем быстрее, тем лучше(желательно в течение пары недель)

Минимальный список сущностей и описание их атрибутов(минимальный набор).
1. Поезд
  - id PK                       - ид
  - index                       - индекс
  - number                      - номер поезда/нитки графика
  - forming_station FK          - станция формирования
  - destinati_station FK        - станция назначения
  - time_arrival                - время отправления со станции отправления
  - time_departure              - время прибытия на станцию назначения
2. Вагон
  - id PK                       - ид
  - cargo_name                  - название груза
  - cargo_destination FK        - станция назначения груза(может не совпадать со станцией назначения поезда)
  - npp                         - номер вагона в поезде по порядку
3. Станция
  - id PK                       - ид
  - code_esr6                   - код ЕСР6 станции (6 цифр, можно взять из интернета или наобум)
  - station_name                - Название станции
  
  
